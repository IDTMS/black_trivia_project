{"ast":null,"code":"var _jsxFileName = \"/Users/marcuslit/Documents/source-code/untitled folder/argo/black_trivia_project/frontend/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [playerNames, setPlayerNames] = useState(['']);\n  const [numPlayers, setNumPlayers] = useState(1);\n  const [playerScores, setPlayerScores] = useState([0]);\n  const [questionId, setQuestionId] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [buzzerLocked, setBuzzerLocked] = useState(false);\n  const [winningPlayer, setWinningPlayer] = useState(null);\n\n  // Fetch questions from the JSON file\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        const response = await fetch('questions.json');\n        if (!response.ok) {\n          throw new Error('Failed to load questions');\n        }\n        const data = await response.json();\n        setQuestions(data);\n        setCurrentQuestion(data[0]);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error loading questions:', error);\n        setError(error.message);\n        setIsLoading(false);\n      }\n    };\n    loadQuestions();\n  }, []);\n\n  // Handle player name input\n  const handlePlayerName = (index, event) => {\n    const updatedNames = [...playerNames];\n    updatedNames[index] = event.target.value;\n    setPlayerNames(updatedNames);\n  };\n\n  // Handle number of players input\n  const handleNumPlayers = event => {\n    const num = parseInt(event.target.value);\n    setNumPlayers(num);\n    setPlayerScores(new Array(num).fill(0));\n    setPlayerNames(new Array(num).fill(''));\n  };\n\n  // Check if the selected answer is correct\n  const checkAnswer = answer => {\n    if (!currentQuestion || !currentQuestion.answers) {\n      console.error('No current question or answers.');\n      return;\n    }\n    const correctAnswer = currentQuestion.answers.find(answerObject => answerObject.correct);\n    if (answer === correctAnswer.answer) {\n      console.log('Correct answer!');\n      const updatedScores = [...playerScores];\n      updatedScores[0] += 1; // Update the first player's score\n      setPlayerScores(updatedScores);\n    } else {\n      console.log('Incorrect answer.');\n    }\n    nextQuestion();\n  };\n\n  // Move to the next question\n  const nextQuestion = () => {\n    if (questions.length > questionNumber + 1) {\n      setCurrentQuestion(questions[questionNumber + 1]);\n      setQuestionNumber(prev => prev + 1);\n      setBuzzerLocked(false); // Unlock the buzzer for the next question\n      setWinningPlayer(null); // Reset the winning player\n    } else {\n      console.log('No more questions.');\n    }\n  };\n\n  // Handle question ID input\n  const handleQuestionId = event => {\n    const id = parseInt(event.target.value);\n    if (id >= 0 && id < questions.length) {\n      setQuestionId(id);\n      setCurrentQuestion(questions[id]);\n    } else {\n      console.error('Invalid question ID.');\n    }\n  };\n\n  // Handle buzzer press\n  const handleBuzzer = playerIndex => {\n    if (!buzzerLocked) {\n      setBuzzerLocked(true); // Lock the buzzer\n      setWinningPlayer(playerNames[playerIndex]); // Set the winning player\n    }\n  };\n\n  // Render loading or error state\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Black Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: numPlayers,\n        onChange: handleNumPlayers,\n        placeholder: \"Enter number of players\",\n        className: \"p-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), Array.from({\n      length: numPlayers\n    }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: playerNames[index],\n        onChange: e => handlePlayerName(index, e),\n        placeholder: `Enter player ${index + 1} name`,\n        className: \"p-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: questionId,\n        onChange: handleQuestionId,\n        placeholder: \"Enter question ID\",\n        className: \"p-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"space-y-2\",\n        children: currentQuestion.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => checkAnswer(answer.answer),\n            className: \"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n            children: answer.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Score: \", playerScores[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question \", questionNumber + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold\",\n          children: \"Buzzer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), Array.from({\n          length: numPlayers\n        }).map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleBuzzer(index),\n          disabled: buzzerLocked,\n          className: \"p-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed\",\n          children: playerNames[index] || `Player ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this)), winningPlayer && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2 text-green-600\",\n          children: [winningPlayer, \" pressed the buzzer first!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"CxvEGPpYoxDlOY9cTir3SWPIsZQ=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Game","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","questionNumber","setQuestionNumber","playerNames","setPlayerNames","numPlayers","setNumPlayers","playerScores","setPlayerScores","questionId","setQuestionId","isLoading","setIsLoading","error","setError","buzzerLocked","setBuzzerLocked","winningPlayer","setWinningPlayer","loadQuestions","response","fetch","ok","Error","data","json","console","message","handlePlayerName","index","event","updatedNames","target","value","handleNumPlayers","num","parseInt","Array","fill","checkAnswer","answer","answers","correctAnswer","find","answerObject","correct","log","updatedScores","nextQuestion","length","prev","handleQuestionId","id","handleBuzzer","playerIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onChange","placeholder","from","map","_","e","question","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/marcuslit/Documents/source-code/untitled folder/argo/black_trivia_project/frontend/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Game = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [playerNames, setPlayerNames] = useState(['']);\n  const [numPlayers, setNumPlayers] = useState(1);\n  const [playerScores, setPlayerScores] = useState([0]);\n  const [questionId, setQuestionId] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [buzzerLocked, setBuzzerLocked] = useState(false);\n  const [winningPlayer, setWinningPlayer] = useState(null);\n\n  // Fetch questions from the JSON file\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        const response = await fetch('questions.json');\n        if (!response.ok) {\n          throw new Error('Failed to load questions');\n        }\n        const data = await response.json();\n        setQuestions(data);\n        setCurrentQuestion(data[0]);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error loading questions:', error);\n        setError(error.message);\n        setIsLoading(false);\n      }\n    };\n    loadQuestions();\n  }, []);\n\n  // Handle player name input\n  const handlePlayerName = (index, event) => {\n    const updatedNames = [...playerNames];\n    updatedNames[index] = event.target.value;\n    setPlayerNames(updatedNames);\n  };\n\n  // Handle number of players input\n  const handleNumPlayers = (event) => {\n    const num = parseInt(event.target.value);\n    setNumPlayers(num);\n    setPlayerScores(new Array(num).fill(0));\n    setPlayerNames(new Array(num).fill(''));\n  };\n\n  // Check if the selected answer is correct\n  const checkAnswer = (answer) => {\n    if (!currentQuestion || !currentQuestion.answers) {\n      console.error('No current question or answers.');\n      return;\n    }\n\n    const correctAnswer = currentQuestion.answers.find((answerObject) => answerObject.correct);\n    if (answer === correctAnswer.answer) {\n      console.log('Correct answer!');\n      const updatedScores = [...playerScores];\n      updatedScores[0] += 1; // Update the first player's score\n      setPlayerScores(updatedScores);\n    } else {\n      console.log('Incorrect answer.');\n    }\n    nextQuestion();\n  };\n\n  // Move to the next question\n  const nextQuestion = () => {\n    if (questions.length > questionNumber + 1) {\n      setCurrentQuestion(questions[questionNumber + 1]);\n      setQuestionNumber((prev) => prev + 1);\n      setBuzzerLocked(false); // Unlock the buzzer for the next question\n      setWinningPlayer(null); // Reset the winning player\n    } else {\n      console.log('No more questions.');\n    }\n  };\n\n  // Handle question ID input\n  const handleQuestionId = (event) => {\n    const id = parseInt(event.target.value);\n    if (id >= 0 && id < questions.length) {\n      setQuestionId(id);\n      setCurrentQuestion(questions[id]);\n    } else {\n      console.error('Invalid question ID.');\n    }\n  };\n\n  // Handle buzzer press\n  const handleBuzzer = (playerIndex) => {\n    if (!buzzerLocked) {\n      setBuzzerLocked(true); // Lock the buzzer\n      setWinningPlayer(playerNames[playerIndex]); // Set the winning player\n    }\n  };\n\n  // Render loading or error state\n  if (isLoading) {\n    return <div>Loading questions...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Black Trivia Game</h1>\n      <div className=\"mb-4\">\n        <input\n          type=\"number\"\n          value={numPlayers}\n          onChange={handleNumPlayers}\n          placeholder=\"Enter number of players\"\n          className=\"p-2 border rounded\"\n        />\n      </div>\n      {Array.from({ length: numPlayers }).map((_, index) => (\n        <div key={index} className=\"mb-4\">\n          <input\n            type=\"text\"\n            value={playerNames[index]}\n            onChange={(e) => handlePlayerName(index, e)}\n            placeholder={`Enter player ${index + 1} name`}\n            className=\"p-2 border rounded\"\n          />\n        </div>\n      ))}\n      <div className=\"mb-4\">\n        <input\n          type=\"number\"\n          value={questionId}\n          onChange={handleQuestionId}\n          placeholder=\"Enter question ID\"\n          className=\"p-2 border rounded\"\n        />\n      </div>\n      {currentQuestion && (\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4\">{currentQuestion.question}</h2>\n          <ul className=\"space-y-2\">\n            {currentQuestion.answers.map((answer, index) => (\n              <li key={index}>\n                <button\n                  onClick={() => checkAnswer(answer.answer)}\n                  className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                >\n                  {answer.answer}\n                </button>\n              </li>\n            ))}\n          </ul>\n          <div className=\"mt-4\">\n            <p>Score: {playerScores[0]}</p>\n            <p>Question {questionNumber + 1} of {questions.length}</p>\n          </div>\n          <div className=\"mt-4\">\n            <h3 className=\"text-lg font-semibold\">Buzzer</h3>\n            {Array.from({ length: numPlayers }).map((_, index) => (\n              <button\n                key={index}\n                onClick={() => handleBuzzer(index)}\n                disabled={buzzerLocked}\n                className=\"p-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n              >\n                {playerNames[index] || `Player ${index + 1}`}\n              </button>\n            ))}\n            {winningPlayer && (\n              <p className=\"mt-2 text-green-600\">{winningPlayer} pressed the buzzer first!</p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}