{"ast":null,"code":"var _jsxFileName = \"/Users/marcuslit/Documents/source-code/untitled folder/argo/black_trivia_project/frontend/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [playerName, setPlayerName] = useState('');\n  const [numPlayers, setNumPlayers] = useState(1);\n  const [playerScores, setPlayerScores] = useState([0]);\n  const [questionId, setQuestionId] = useState(0);\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        const response = await fetch('questions.json');\n        const data = await response.json();\n        setQuestions(data);\n        setCurrentQuestion(data[0]);\n      } catch (error) {\n        console.error('Error loading questions:', error);\n      }\n    };\n    loadQuestions();\n  }, []);\n  const handlePlayerName = event => {\n    setPlayerName(event.target.value);\n  };\n  const handleNumPlayers = event => {\n    setNumPlayers(parseInt(event.target.value));\n    setPlayerScores(new Array(parseInt(event.target.value)).fill(0));\n  };\n  const checkAnswer = answer => {\n    if (currentQuestion && currentQuestion.answers) {\n      const correctAnswer = currentQuestion.answers.find(answerObject => answerObject.correct);\n      if (answer === correctAnswer.answer) {\n        console.log('Correct answer!');\n        playerScores[0] += 1;\n        setPlayerScores([...playerScores]);\n      } else {\n        console.log('Incorrect answer.');\n      }\n      nextQuestion();\n    } else {\n      console.error('No current question or answers.');\n    }\n  };\n  const nextQuestion = () => {\n    if (questions.length > questionNumber + 1) {\n      setCurrentQuestion(questions[questionNumber + 1]);\n      setQuestionNumber(prevQuestionNumber => prevQuestionNumber + 1);\n    } else {\n      console.log('No more questions.');\n    }\n  };\n  const handleQuestionId = event => {\n    setQuestionId(parseInt(event.target.value));\n    setCurrentQuestion(questions[parseInt(event.target.value)]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Black Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: playerName,\n      onChange: handlePlayerName,\n      placeholder: \"Enter player name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: numPlayers,\n      onChange: handleNumPlayers,\n      placeholder: \"Enter number of players\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: questionId,\n      onChange: handleQuestionId,\n      placeholder: \"Enter question ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => checkAnswer(answer.answer),\n            children: answer.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", playerScores[0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Question \", questionNumber + 1, \" of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"Sr+KSKGtX/89xM7KfOipc06Vicc=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Game","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","questionNumber","setQuestionNumber","playerName","setPlayerName","numPlayers","setNumPlayers","playerScores","setPlayerScores","questionId","setQuestionId","loadQuestions","response","fetch","data","json","error","console","handlePlayerName","event","target","value","handleNumPlayers","parseInt","Array","fill","checkAnswer","answer","answers","correctAnswer","find","answerObject","correct","log","nextQuestion","length","prevQuestionNumber","handleQuestionId","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","question","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/marcuslit/Documents/source-code/untitled folder/argo/black_trivia_project/frontend/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Game = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [playerName, setPlayerName] = useState('');\n  const [numPlayers, setNumPlayers] = useState(1);\n  const [playerScores, setPlayerScores] = useState([0]);\n  const [questionId, setQuestionId] = useState(0);\n\n  useEffect(() => {\n    const loadQuestions = async () => {\n      try {\n        const response = await fetch('questions.json');\n        const data = await response.json();\n        setQuestions(data);\n        setCurrentQuestion(data[0]);\n      } catch (error) {\n        console.error('Error loading questions:', error);\n      }\n    };\n    loadQuestions();\n  }, []);\n\n  const handlePlayerName = (event) => {\n    setPlayerName(event.target.value);\n  };\n\n  const handleNumPlayers = (event) => {\n    setNumPlayers(parseInt(event.target.value));\n    setPlayerScores(new Array(parseInt(event.target.value)).fill(0));\n  };\n\n  const checkAnswer = (answer) => {\n    if (currentQuestion && currentQuestion.answers) {\n      const correctAnswer = currentQuestion.answers.find((answerObject) => answerObject.correct);\n      if (answer === correctAnswer.answer) {\n        console.log('Correct answer!');\n        playerScores[0] += 1;\n        setPlayerScores([...playerScores]);\n      } else {\n        console.log('Incorrect answer.');\n      }\n      nextQuestion();\n    } else {\n      console.error('No current question or answers.');\n    }\n  };\n\n  const nextQuestion = () => {\n    if (questions.length > questionNumber + 1) {\n      setCurrentQuestion(questions[questionNumber + 1]);\n      setQuestionNumber((prevQuestionNumber) => prevQuestionNumber + 1);\n    } else {\n      console.log('No more questions.');\n    }\n  };\n\n  const handleQuestionId = (event) => {\n    setQuestionId(parseInt(event.target.value));\n    setCurrentQuestion(questions[parseInt(event.target.value)]);\n  };\n\n  return (\n    <div>\n      <h1>Black Trivia Game</h1>\n      <input type=\"text\" value={playerName} onChange={handlePlayerName} placeholder=\"Enter player name\" />\n      <input type=\"number\" value={numPlayers} onChange={handleNumPlayers} placeholder=\"Enter number of players\" />\n      <input type=\"number\" value={questionId} onChange={handleQuestionId} placeholder=\"Enter question ID\" />\n      {currentQuestion && (\n        <div>\n          <h2>{currentQuestion.question}</h2>\n          <ul>\n            {currentQuestion.answers.map((answer, index) => (\n              <li key={index}>\n                <button onClick={() => checkAnswer(answer.answer)}>{answer.answer}</button>\n              </li>\n            ))}\n          </ul>\n          <p>Score: {playerScores[0]}</p>\n          <p>Question {questionNumber + 1} of {questions.length}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}